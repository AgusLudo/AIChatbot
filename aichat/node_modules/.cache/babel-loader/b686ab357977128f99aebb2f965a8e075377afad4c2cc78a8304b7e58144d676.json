{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0fa2e3d3\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chatbox-container\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Ai Chat Bot\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"messageBox mt-8\"\n};\nconst _hoisted_5 = {\n  class: \"inputContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(message.from == 'user' ? 'messageFromUser' : 'messageFromChatGpt')\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass(message.from == 'user' ? 'userMessageWrapper' : 'chatGptMessageWrapper')\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass(message.from == 'user' ? 'userMessageContent' : 'chatGptMessageContent')\n    }, _toDisplayString(message.data), 3 /* TEXT, CLASS */)], 2 /* CLASS */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.currentMessage = $event),\n    type: \"text\",\n    class: \"messageInput\",\n    placeholder: \"Pregunta lo que quieras...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.currentMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.sendMessage($data.currentMessage)),\n    class: \"askButton\"\n  }, \" Enviar \")])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$data","messages","message","index","_normalizeClass","from","data","_hoisted_5","currentMessage","$event","type","placeholder","onClick","_cache","$options","sendMessage"],"sources":["C:\\Users\\ludov\\OneDrive\\Documentos\\GitHub\\AIChatbot\\aichat\\src\\components\\ChatBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"chatbox-container\">\r\n    <div class=\"container\">\r\n      <h1>Ai Chat Bot</h1>\r\n      <div class=\"messageBox mt-8\">\r\n        <template v-for=\"(message, index) in messages\" :key=\"index\">\r\n          <div\r\n            :class=\"\r\n              message.from == 'user' ? 'messageFromUser' : 'messageFromChatGpt'\r\n            \"\r\n          >\r\n            <div\r\n              :class=\"\r\n                message.from == 'user'\r\n                  ? 'userMessageWrapper'\r\n                  : 'chatGptMessageWrapper'\r\n              \"\r\n            >\r\n              <div\r\n                :class=\"\r\n                  message.from == 'user'\r\n                    ? 'userMessageContent'\r\n                    : 'chatGptMessageContent'\r\n                \"\r\n              >\r\n                {{ message.data }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </div>\r\n      <div class=\"inputContainer\">\r\n        <input\r\n          v-model=\"currentMessage\"\r\n          type=\"text\"\r\n          class=\"messageInput\"\r\n          placeholder=\"Pregunta lo que quieras...\"\r\n        />\r\n        <button @click=\"sendMessage(currentMessage)\" class=\"askButton\">\r\n          Enviar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"ChatBox\",\r\n  data() {\r\n    return {\r\n      currentMessage: \"\",\r\n      messages: [],\r\n    };\r\n  },\r\n  methods: {\r\n    async sendMessage(message) {\r\n      this.messages.push({\r\n        from: \"user\",\r\n        data: message,\r\n      });\r\n      await axios\r\n        .post(\"http://localhost:3000/chatbot\", {\r\n          message: message,\r\n        })\r\n        .then((response) => {\r\n          this.messages.push({\r\n            from: \"chatGpt\",\r\n            data: response.data.data, // Access the 'data' property of the response object\r\n          });\r\n        });\r\n      this.currentMessage = \"\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\");\r\n\r\n.chatbox-container {\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n  z-index: 1000;\r\n}\r\n\r\n.container {\r\n  width: 360px;\r\n  height: 600px;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  font-family: \"Roboto\", sans-serif;\r\n}\r\n\r\nh1 {\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  color: #222;\r\n  padding: 16px;\r\n  margin: 0;\r\n  background-color: #f7f7f7;\r\n  border-bottom: 1px solid #e7e7e7;\r\n}\r\n\r\n.messageBox {\r\n  padding: 16px;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.messageFromUser,\r\n.messageFromChatGpt {\r\n  display: flex;\r\n}\r\n\r\n.messageBox {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n  padding: 0 16px;\r\n  border-top: 1px solid #f0f0f0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  flex-grow: 1;\r\n}\r\n\r\n.messageFromUser,\r\n.messageFromChatGpt {\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.userMessageWrapper,\r\n.chatGptMessageWrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.userMessageWrapper {\r\n  align-self: flex-end;\r\n}\r\n\r\n.chatGptMessageWrapper {\r\n  align-self: flex-start;\r\n}\r\n\r\n.userMessageContent,\r\n.chatGptMessageContent {\r\n  max-width: 60%;\r\n  padding: 8px 12px;\r\n  border-radius: 18px;\r\n  margin-bottom: 2px;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n}\r\n\r\n.userMessageContent {\r\n  background-color: #18c6f2;\r\n  color: white;\r\n  border-top-left-radius: 0;\r\n}\r\n\r\n.chatGptMessageContent {\r\n  background-color: #ededed;\r\n  color: #222;\r\n  border-top-right-radius: 0;\r\n}\r\n\r\n.userMessageTimestamp,\r\n.chatGptMessageTimestamp {\r\n  font-size: 10px;\r\n  color: #999;\r\n  margin-top: 2px;\r\n}\r\n\r\n.userMessageTimestamp {\r\n  align-self: flex-end;\r\n}\r\n\r\n.chatGptMessageTimestamp {\r\n  align-self: flex-start;\r\n}\r\n\r\n.inputContainer {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.messageInput {\r\n  flex-grow: 1;\r\n  border: none;\r\n  outline: none;\r\n  padding: 12px;\r\n  font-size: 16px;\r\n  background-color: white;\r\n  border-radius: 24px;\r\n  margin-right: 8px;\r\n}\r\n\r\n.askButton {\r\n  background-color: #18c6f2;\r\n  color: white;\r\n  font-size: 16px;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 24px;\r\n  transition: background-color 0.3s ease-in-out;\r\n}\r\n\r\n.askButton:hover {\r\n  background-color: #18c6f2;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .container {\r\n    width: 100%;\r\n    max-width: none;\r\n    border-radius: 0;\r\n  }\r\n}\r\n.chatbox-container {\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n  z-index: 1000;\r\n}\r\n\r\n.messageBox {\r\n  padding: 16px;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.messageFromUser,\r\n.messageFromChatGpt {\r\n  display: flex;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAW;gEACpBC,mBAAA,CAAoB,YAAhB,aAAW;;EACVD,KAAK,EAAC;AAAiB;;EA2BvBA,KAAK,EAAC;AAAgB;;uBA9B/BE,mBAAA,CA0CM,OA1CNC,UA0CM,GAzCJF,mBAAA,CAwCM,OAxCNG,UAwCM,GAvCJC,UAAoB,EACpBJ,mBAAA,CA0BM,OA1BNK,UA0BM,I,kBAzBJJ,mBAAA,CAwBWK,SAAA,QAAAC,WAAA,CAxB0BC,KAAA,CAAAC,QAAQ,GAA3BC,OAAO,EAAEC,KAAK;yBAC9BV,mBAAA,CAsBM;WAvB6CU,KAAK;MAErDZ,KAAK,EAAAa,eAAA,CAAkBF,OAAO,CAACG,IAAI,qD;QAIpCb,mBAAA,CAgBM;MAfHD,KAAK,EAAAa,eAAA,CAAoBF,OAAO,CAACG,IAAI,a;QAMtCb,mBAAA,CAQM;MAPHD,KAAK,EAAAa,eAAA,CAAsBF,OAAO,CAACG,IAAI,a;wBAMrCH,OAAO,CAACI,IAAI,wB;oCAMzBd,mBAAA,CAUM,OAVNe,UAUM,G,gBATJf,mBAAA,CAKE;+DAJSQ,KAAA,CAAAQ,cAAc,GAAAC,MAAA;IACvBC,IAAI,EAAC,MAAM;IACXnB,KAAK,EAAC,cAAc;IACpBoB,WAAW,EAAC;iDAHHX,KAAA,CAAAQ,cAAc,E,GAKzBhB,mBAAA,CAES;IAFAoB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEK,QAAA,CAAAC,WAAW,CAACf,KAAA,CAAAQ,cAAc;IAAGjB,KAAK,EAAC;KAAY,UAE/D,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}